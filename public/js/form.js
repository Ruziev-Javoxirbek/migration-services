document.addEventListener('DOMContentLoaded', () => {
    const validateField = (input, pattern, errorMessage) => {
        input.addEventListener('input', () => {
            if (!input.value.match(pattern) && input.value !== '') {
                input.classList.add('is-invalid');
                input.setCustomValidity(errorMessage);
            } else {
                input.classList.remove('is-invalid');
                input.setCustomValidity('');
            }
        });
    };

    // –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–æ–ª—è
    validateField(document.querySelector('[name="surname_en"]'), /^[A-Za-z\s]+$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã');
    validateField(document.querySelector('[name="name_en"]'), /^[A-Za-z\s]+$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã');
    validateField(document.querySelector('[name="patronymic_en"]'), /^[A-Za-z\s]*$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã');

    // —Ä—É—Å—Å–∫–∏–µ –ø–æ–ª—è
    validateField(document.querySelector('[name="surname_ru"]'), /^[–ê-–Ø–∞-—è–Å—ë\s]+$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã');
    validateField(document.querySelector('[name="name_ru"]'), /^[–ê-–Ø–∞-—è–Å—ë\s]+$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã');
    validateField(document.querySelector('[name="patronymic_ru"]'), /^[–ê-–Ø–∞-—è–Å—ë\s]*$/, '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã');
});

document.addEventListener('DOMContentLoaded', () => {
    function setupPhoneValidation(inputId) {
        const input = document.getElementById(inputId);

        input.addEventListener('focus', function () {
            if (this.value === '') {
                this.value = '+';
            }
        });

        input.addEventListener('input', function () {
            if (!this.value.startsWith('+')) {
                this.value = '+' + this.value.replace(/\D/g, '');
            }

            let digits = this.value.slice(1).replace(/\D/g, '').slice(0, 12);
            this.value = '+' + digits;

            if (digits.length < 10 || digits.length > 11) {
                this.classList.add('is-invalid');
            } else {
                this.classList.remove('is-invalid');
            }
        });
    }

    setupPhoneValidation('phone');
    setupPhoneValidation('host_phone');
});

function previewFiles(input) {
    const previewContainer = document.getElementById('preview-container');
    previewContainer.innerHTML = '';

    const files = input.files;
    for (const file of files) {
        const reader = new FileReader();

        reader.onload = function(e) {
            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.style.maxWidth = '200px';
                img.style.margin = '10px';
                img.style.cursor = 'pointer';
                img.onclick = () => openFullImage(e.target.result); // üîç

                previewContainer.appendChild(img);
            } else {
                const p = document.createElement('p');
                p.textContent = `üìÑ ${file.name}`;
                previewContainer.appendChild(p);
            }
        };

        reader.readAsDataURL(file);
    }
}
document.addEventListener('DOMContentLoaded', () => {
    const onlyDigitsFields = ['host_house', 'host_flat', 'stay_house', 'stay_flat'];

    onlyDigitsFields.forEach(fieldName => {
        const input = document.getElementsByName(fieldName)[0];
        if (input) {
            input.addEventListener('input', function () {
                this.value = this.value.replace(/\D/g, ''); // —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä—ã
            });
        }
    });
});

function openFullImage(src) {
    const fullImg = document.createElement('img');
    fullImg.src = src;
    fullImg.style.position = 'fixed';
    fullImg.style.top = '0';
    fullImg.style.left = '0';
    fullImg.style.width = '100vw';
    fullImg.style.height = '100vh';
    fullImg.style.objectFit = 'contain';
    fullImg.style.background = 'rgba(0,0,0,0.9)';
    fullImg.style.zIndex = '1000';
    fullImg.style.cursor = 'zoom-out';

    fullImg.onclick = () => document.body.removeChild(fullImg); // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    document.body.appendChild(fullImg);
}

document.addEventListener('DOMContentLoaded', function () {
    const regionSelect = document.getElementById('region');
    const citySelect = document.getElementById('city');
    const hostRegion = document.getElementById('host_region');
    const hostCity = document.getElementById('host_city');

    const data = {
        "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞": [
            "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫", "–°—É—Ä–≥—É—Ç", "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫", "–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫", "–ö–æ–≥–∞–ª—ã–º",
            "–ù—è–≥–∞–Ω—å", "–ú–µ–≥–∏–æ–Ω", "–†–∞–¥—É–∂–Ω—ã–π", "–ü—ã—Ç—å-–Ø—Ö", "–£—Ä–∞–π", "–õ–∞–Ω–≥–µ–ø–∞—Å",
            "–õ—è–Ω—Ç–æ—Ä", "–Æ–≥–æ—Ä—Å–∫", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ë–µ–ª–æ—è—Ä—Å–∫–∏–π", "–ü–æ–∫–∞—á–∏"
        ],
        "–ú–æ—Å–∫–≤–∞": [
            "–ú–æ—Å–∫–≤–∞"
        ],
        "–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π": [
            "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ù–∞—Ö–æ–¥–∫–∞", "–£—Å—Å—É—Ä–∏–π—Å–∫", "–ê—Ä—Å–µ–Ω—å–µ–≤", "–ë–æ–ª—å—à–æ–π –ö–∞–º–µ–Ω—å", "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫"
        ]
    };

    function updateCityOptions(regionSelect, citySelect) {
        const selectedRegion = regionSelect.value;
        citySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>';

        if (data[selectedRegion]) {
            data[selectedRegion].forEach(function (city) {
                const option = document.createElement('option');
                option.value = city;
                option.textContent = city;
                citySelect.appendChild(option);
            });
        }
    }

    if (regionSelect && citySelect) {
        regionSelect.addEventListener('change', function () {
            updateCityOptions(regionSelect, citySelect);
        });
    }

    if (hostRegion && hostCity) {
        hostRegion.addEventListener('change', function () {
            updateCityOptions(hostRegion, hostCity);
        });
    }
});
